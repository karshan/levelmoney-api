{-# LANGUAGE BangPatterns, DeriveDataTypeable, DeriveGeneric, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC  -fno-warn-unused-imports #-}
module LevelMoney.User (User(..)) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified GHC.Generics as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import qualified LevelMoney.UserAgent as LevelMoney (UserAgent)

data User = User{client_user_agent :: !(P'.Maybe LevelMoney.UserAgent), client_version :: !(P'.Maybe P'.Int64),
                 created :: !(P'.Maybe P'.Int64), email :: !(P'.Maybe P'.Utf8), first_name :: !(P'.Maybe P'.Utf8),
                 has_lulz_autogenerated_insights :: !(P'.Maybe P'.Bool), has_lulz_budget :: !(P'.Maybe P'.Bool),
                 last_name :: !(P'.Maybe P'.Utf8), password :: !(P'.Maybe P'.Utf8), phone_number :: !(P'.Maybe P'.Utf8),
                 variabill_migrated :: !(P'.Maybe P'.Bool), unknown'field :: !(P'.UnknownField)}
          deriving (Prelude'.Show, Prelude'.Eq, Prelude'.Ord, Prelude'.Typeable, Prelude'.Data, Prelude'.Generic)

instance P'.UnknownMessage User where
  getUnknownField = unknown'field
  putUnknownField u'f msg = msg{unknown'field = u'f}

instance P'.Mergeable User where
  mergeAppend (User x'1 x'2 x'3 x'4 x'5 x'6 x'7 x'8 x'9 x'10 x'11 x'12) (User y'1 y'2 y'3 y'4 y'5 y'6 y'7 y'8 y'9 y'10 y'11 y'12)
   = User (P'.mergeAppend x'1 y'1) (P'.mergeAppend x'2 y'2) (P'.mergeAppend x'3 y'3) (P'.mergeAppend x'4 y'4)
      (P'.mergeAppend x'5 y'5)
      (P'.mergeAppend x'6 y'6)
      (P'.mergeAppend x'7 y'7)
      (P'.mergeAppend x'8 y'8)
      (P'.mergeAppend x'9 y'9)
      (P'.mergeAppend x'10 y'10)
      (P'.mergeAppend x'11 y'11)
      (P'.mergeAppend x'12 y'12)

instance P'.Default User where
  defaultValue
   = User P'.defaultValue P'.defaultValue P'.defaultValue P'.defaultValue P'.defaultValue P'.defaultValue P'.defaultValue
      P'.defaultValue
      P'.defaultValue
      P'.defaultValue
      P'.defaultValue
      P'.defaultValue

instance P'.Wire User where
  wireSize ft' self'@(User x'1 x'2 x'3 x'4 x'5 x'6 x'7 x'8 x'9 x'10 x'11 x'12)
   = case ft' of
       10 -> calc'Size
       11 -> P'.prependMessageSize calc'Size
       _ -> P'.wireSizeErr ft' self'
    where
        calc'Size
         = (P'.wireSizeOpt 1 14 x'1 + P'.wireSizeOpt 1 3 x'2 + P'.wireSizeOpt 1 3 x'3 + P'.wireSizeOpt 1 9 x'4 +
             P'.wireSizeOpt 1 9 x'5
             + P'.wireSizeOpt 1 8 x'6
             + P'.wireSizeOpt 1 8 x'7
             + P'.wireSizeOpt 1 9 x'8
             + P'.wireSizeOpt 1 9 x'9
             + P'.wireSizeOpt 1 9 x'10
             + P'.wireSizeOpt 1 8 x'11
             + P'.wireSizeUnknownField x'12)
  wirePut ft' self'@(User x'1 x'2 x'3 x'4 x'5 x'6 x'7 x'8 x'9 x'10 x'11 x'12)
   = case ft' of
       10 -> put'Fields
       11 -> do
               P'.putSize (P'.wireSize 10 self')
               put'Fields
       _ -> P'.wirePutErr ft' self'
    where
        put'Fields
         = do
             P'.wirePutOpt 10 9 x'4
             P'.wirePutOpt 18 9 x'9
             P'.wirePutOpt 24 8 x'7
             P'.wirePutOpt 32 3 x'3
             P'.wirePutOpt 40 8 x'11
             P'.wirePutOpt 48 8 x'6
             P'.wirePutOpt 58 9 x'10
             P'.wirePutOpt 66 9 x'5
             P'.wirePutOpt 74 9 x'8
             P'.wirePutOpt 80 14 x'1
             P'.wirePutOpt 88 3 x'2
             P'.wirePutUnknownField x'12
  wireGet ft'
   = case ft' of
       10 -> P'.getBareMessageWith (P'.catch'Unknown update'Self)
       11 -> P'.getMessageWith (P'.catch'Unknown update'Self)
       _ -> P'.wireGetErr ft'
    where
        update'Self wire'Tag old'Self
         = case wire'Tag of
             80 -> Prelude'.fmap (\ !new'Field -> old'Self{client_user_agent = Prelude'.Just new'Field}) (P'.wireGet 14)
             88 -> Prelude'.fmap (\ !new'Field -> old'Self{client_version = Prelude'.Just new'Field}) (P'.wireGet 3)
             32 -> Prelude'.fmap (\ !new'Field -> old'Self{created = Prelude'.Just new'Field}) (P'.wireGet 3)
             10 -> Prelude'.fmap (\ !new'Field -> old'Self{email = Prelude'.Just new'Field}) (P'.wireGet 9)
             66 -> Prelude'.fmap (\ !new'Field -> old'Self{first_name = Prelude'.Just new'Field}) (P'.wireGet 9)
             48 -> Prelude'.fmap (\ !new'Field -> old'Self{has_lulz_autogenerated_insights = Prelude'.Just new'Field})
                    (P'.wireGet 8)
             24 -> Prelude'.fmap (\ !new'Field -> old'Self{has_lulz_budget = Prelude'.Just new'Field}) (P'.wireGet 8)
             74 -> Prelude'.fmap (\ !new'Field -> old'Self{last_name = Prelude'.Just new'Field}) (P'.wireGet 9)
             18 -> Prelude'.fmap (\ !new'Field -> old'Self{password = Prelude'.Just new'Field}) (P'.wireGet 9)
             58 -> Prelude'.fmap (\ !new'Field -> old'Self{phone_number = Prelude'.Just new'Field}) (P'.wireGet 9)
             40 -> Prelude'.fmap (\ !new'Field -> old'Self{variabill_migrated = Prelude'.Just new'Field}) (P'.wireGet 8)
             _ -> let (field'Number, wire'Type) = P'.splitWireTag wire'Tag in P'.unknown field'Number wire'Type old'Self

instance P'.MessageAPI msg' (msg' -> User) User where
  getVal m' f' = f' m'

instance P'.GPB User

instance P'.ReflectDescriptor User where
  getMessageInfo _
   = P'.GetMessageInfo (P'.fromDistinctAscList []) (P'.fromDistinctAscList [10, 18, 24, 32, 40, 48, 58, 66, 74, 80, 88])
  reflectDescriptorInfo _
   = Prelude'.read
      "DescriptorInfo {descName = ProtoName {protobufName = FIName \".LevelMoney.User\", haskellPrefix = [], parentModule = [MName \"LevelMoney\"], baseName = MName \"User\"}, descFilePath = [\"LevelMoney\",\"User.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.client_user_agent\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"client_user_agent\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 10}, wireTag = WireTag {getWireTag = 80}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".LevelMoney.UserAgent\", haskellPrefix = [], parentModule = [MName \"LevelMoney\"], baseName = MName \"UserAgent\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.client_version\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"client_version\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 11}, wireTag = WireTag {getWireTag = 88}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.created\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"created\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.email\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"email\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.first_name\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"first_name\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 8}, wireTag = WireTag {getWireTag = 66}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.has_lulz_autogenerated_insights\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"has_lulz_autogenerated_insights\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 6}, wireTag = WireTag {getWireTag = 48}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.has_lulz_budget\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"has_lulz_budget\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.last_name\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"last_name\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 9}, wireTag = WireTag {getWireTag = 74}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.password\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"password\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.phone_number\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"phone_number\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 7}, wireTag = WireTag {getWireTag = 58}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".LevelMoney.User.variabill_migrated\", haskellPrefix' = [], parentModule' = [MName \"LevelMoney\",MName \"User\"], baseName' = FName \"variabill_migrated\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 40}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = True, lazyFields = False, makeLenses = False}"

instance P'.TextType User where
  tellT = P'.tellSubMessage
  getT = P'.getSubMessage

instance P'.TextMsg User where
  textPut msg
   = do
       P'.tellT "client_user_agent" (client_user_agent msg)
       P'.tellT "client_version" (client_version msg)
       P'.tellT "created" (created msg)
       P'.tellT "email" (email msg)
       P'.tellT "first_name" (first_name msg)
       P'.tellT "has_lulz_autogenerated_insights" (has_lulz_autogenerated_insights msg)
       P'.tellT "has_lulz_budget" (has_lulz_budget msg)
       P'.tellT "last_name" (last_name msg)
       P'.tellT "password" (password msg)
       P'.tellT "phone_number" (phone_number msg)
       P'.tellT "variabill_migrated" (variabill_migrated msg)
  textGet
   = do
       mods <- P'.sepEndBy
                (P'.choice
                  [parse'client_user_agent, parse'client_version, parse'created, parse'email, parse'first_name,
                   parse'has_lulz_autogenerated_insights, parse'has_lulz_budget, parse'last_name, parse'password,
                   parse'phone_number, parse'variabill_migrated])
                P'.spaces
       Prelude'.return (Prelude'.foldl (\ v f -> f v) P'.defaultValue mods)
    where
        parse'client_user_agent
         = P'.try
            (do
               v <- P'.getT "client_user_agent"
               Prelude'.return (\ o -> o{client_user_agent = v}))
        parse'client_version
         = P'.try
            (do
               v <- P'.getT "client_version"
               Prelude'.return (\ o -> o{client_version = v}))
        parse'created
         = P'.try
            (do
               v <- P'.getT "created"
               Prelude'.return (\ o -> o{created = v}))
        parse'email
         = P'.try
            (do
               v <- P'.getT "email"
               Prelude'.return (\ o -> o{email = v}))
        parse'first_name
         = P'.try
            (do
               v <- P'.getT "first_name"
               Prelude'.return (\ o -> o{first_name = v}))
        parse'has_lulz_autogenerated_insights
         = P'.try
            (do
               v <- P'.getT "has_lulz_autogenerated_insights"
               Prelude'.return (\ o -> o{has_lulz_autogenerated_insights = v}))
        parse'has_lulz_budget
         = P'.try
            (do
               v <- P'.getT "has_lulz_budget"
               Prelude'.return (\ o -> o{has_lulz_budget = v}))
        parse'last_name
         = P'.try
            (do
               v <- P'.getT "last_name"
               Prelude'.return (\ o -> o{last_name = v}))
        parse'password
         = P'.try
            (do
               v <- P'.getT "password"
               Prelude'.return (\ o -> o{password = v}))
        parse'phone_number
         = P'.try
            (do
               v <- P'.getT "phone_number"
               Prelude'.return (\ o -> o{phone_number = v}))
        parse'variabill_migrated
         = P'.try
            (do
               v <- P'.getT "variabill_migrated"
               Prelude'.return (\ o -> o{variabill_migrated = v}))